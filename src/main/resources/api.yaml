openapi: 3.0.0
info:
  title: Identity Service
  description: |
    It's an service that allows you to create and manage account, and issue login credentials.
  version: 0.1.0
servers:
  - url: http://api.example.com/v1
    description: Production server
  - url: http://staging-api.example.com/v1
    description: Staging server
paths:
  /accounts:
    post:
      summary: Create an account.
      description: |
        Create an account, and issue cookie credential.
        Initially, the account is in inactive state, user need to email verification to activate it.
        The issued cookie will be returned with "Set-Cookie" header.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: The account is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unknown error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{id}:
    parameters:
      - name: "id"
        in: "path"
        schema:
          type: string
          minLength: 1
        required: true
    get:
      summary: Get user's account.
      description: |
        It gets the user's account information.
        If "id" is the special string "@me", it means the cookie credential will be used to determine the account to get.
        If cookie credential is given, belongs to the same account as the owner of the account to get, then the following information
        will be returned:
        - username
        - firstName
        - lastName
        - emails
        - description

        Otherwise, only the following information will be returned:
        - username
        - description
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: |
            Invalid cookie credential is used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unknown error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/@me:
    put:
      summary: Update an account.
      description: |
        Updates an account's information. The user's cookie credential must be carried.
        The following fields can be updated:
        - password
        - description
        - emails

        If "emails" is carried, it will be merged with the existing emails. If a duplicate one is found, 400 is returned.
        An account can have at most two emails, and at least one.
        If an account already has one verified email, the new email will be appended with "verified" being false.
        After the new email is verified, the new one will replace the old one, and there will be only one email.
        If the account has only one unverified email, the new email will directly replace the old one.
      parameters:
        - name: "token"
          in: "query"
          schema:
            type: string
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '204':
          description: Successfully upate the account.
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |
            Invalid cookie credential is used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unknown error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sessions:
    post:
      summary: Create a new login session.
      description: |
        Given the username and password, login and obtain the cookie credential.
        The issued cookie will be returned with "Set-Cookie" header.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '201':
          description: The session is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unknown error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens:
    post:
      summary: Create a new token.
      description: |
        Create a new token.
        Cookie credential must be carried.
        Depending on the type of the requested token, different criteria must be met:
        - standard:
          - Only need a valid and unexpired credential.
        - critical:
          - The credential must be valid and be issued in the last 5 minutes.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '201':
          description: The session is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Invalid request or credential too old.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credential.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unknown error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Account:
      type: "object"
      properties:
        username:
          type: "string"
          pattern: '^[A-Za-z0-9_-]{3,32}$'
        createTime:
          type: "string"
          format: "date-time"
        updateTime:
          type: "string"
          format: "date-time"
        password:
          type: "string"
          minLength: 6
          maxLength: 30
        description:
          type: "string"
          maxLength: 500
        emails:
          type: "array"
          items:
            $ref: '#/components/schemas/Email'
    Email:
      type: "object"
      properties:
        value:
          type: "string"
          maxLength: 256
        verified:
          type: "boolean"
      required:
        - "value"
    Session:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        tags:
          type: array
          items:
            type: string
            enum:
              - emailUnverified
    Token:
      type: "object"
      properties:
        value:
          type: "string"
        type:
          type: "string"
          enum:
            - standard
            - critical
    Error:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 500000
        message:
          type: "string"
          example: "Unknown server error"
